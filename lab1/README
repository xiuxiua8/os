### original code:
with wait:
        bash-5.0$ make; ./pid
        make: Nothing to be done for 'all'.
        parent: pid = 3281
        parent: pid1 = 3280
        child: pid = 0
        child: pid1 = 3281
without wait:
        bash-5.0$ make; ./pid
        make: Nothing to be done for 'all'.
        parent: pid = 3281
        parent: pid1 = 3280
        child: pid = 0
        child: pid1 = 3281

### add global variable:
with wait:

bash-5.0$ make; ./pid
gcc -o pid pid.c 
parent: pid = 4956
parent: pid1 = 4955
the global variable now is 5, address is 0x420050
child: pid = 0
child: pid1 = 4956
the global variable now is 15, address is 0x420050

bash-5.0$ make; ./pid
make: Nothing to be done for 'all'.
parent: pid = 4986
parent: pid1 = 4985
child: pid = 0
child: pid1 = 4986
the global variable now is 15, address is 0x420050
the global variable now is 5, address is 0x420050

bash-5.0$ make; ./pid
make: Nothing to be done for 'all'.
parent: pid = 5010
parent: pid1 = 5009
the global variable now is 5, address is 0x420050
child: pid = 0
child: pid1 = 5010
the global variable now is 15, address is 0x420050

可见输出顺序是完全随机的，

### child sleep for a while 

如果我们加入sleep()，就可以实现任意的输出顺序，下面是一个例子

bash-5.0$ make; ./pid
gcc -o pid pid.c 
parent: pid = 5560
parent: pid1 = 5559
slept for 5 secends
child: pid = 0
child: pid1 = 5560
the global variable in child process is 15, address is 0x420060
the global variable in parent process is 5, address is 0x420060

让子进程sleep 5 seconds，父进程wait子进程后输出最后一行

### add system and exec

bash-5.0$ make; ./pid
make: Nothing to be done for 'all'.
parent: pid = 7207
parent: pid1 = 7206
the global variable in parent process is 5, address is 0x420068
child: pid = 0
child: pid1 = 7207
the global variable in child process is 15, address is 0x420068
system: 
call program: PID = 7208
exec: 
call program: PID = 7207


我们可以发现加入PID有如下规律，
parent: 0
child: 1
system call: 2
exec call: 1

system 函数会创建一个新的进程来执行命令，因此它分配了一个新的、更大的 PID

exec 函数直接替换了原子进程（PID 7207）的地址空间，所以它的 PID 保持不变

### tthread 

bash-5.0$ make; ./t
gcc -o t t.c
/usr/bin/ld: /tmp/ccsXvg85.o: in function main':
t.c:(.text+0x15c): undefined reference to pthread_create'
/usr/bin/ld: t.c:(.text+0x178): undefined reference to pthread_create'
/usr/bin/ld: t.c:(.text+0x184): undefined reference to pthread_join'
/usr/bin/ld: t.c:(.text+0x190): undefined reference to pthread_join''
collect2: error: ld returned 1 exit status
make: *** [makefile:11: t] Error 1
bash: ./t: No such file or directory

错误是因为编译时没有链接 pthread 库，导致 pthread_create 和 pthread_join 等函数找不到引用。
要解决这个问题，需要在编译时添加 -lpthread 选项。

t: t.c
	gcc -o t t.c

将其修改为：

t: t.c
	gcc -o t t.c -lpthread


bash-5.0$ make; ./t
make: Nothing to be done for 'all'.
shared_var before decrement begins = 478
Final value of shared_var = 0
bash-5.0$ make; ./t
make: Nothing to be done for 'all'.
shared_var before decrement begins = 451
Final value of shared_var = 0
bash-5.0$ make; ./t
make: Nothing to be done for 'all'.
shared_var before decrement begins = 468
Final value of shared_var = 0
bash-5.0$ make; ./t
make: Nothing to be done for 'all'.
shared_var before decrement begins = 640
Final value of shared_var = 0
bash-5.0$ make; ./t
make: Nothing to be done for 'all'.
shared_var before decrement begins = 793
Final value of shared_var = 0

由此可见每一次decrement开始时，共享变量都有不同的值，两个线程互不干涉互不影响。 没有同步关系。

但都对shared_var有操作，且加了锁。总执行5000加减操作，正负相消，最终结果总是零。

下面是去掉锁的输出，
bash-5.0$ make; ./t
make: Nothing to be done for 'all'.
shared_var before decrement begins = 5000
Final value of shared_var = 0
bash-5.0$ make; ./t
make: Nothing to be done for 'all'.
shared_var before decrement begins = 4411
Final value of shared_var = 0
bash-5.0$ make; ./t
make: Nothing to be done for 'all'.

当重复次数为5000时，increment和decrement不易发生竞争，
现将5000 调整为 500000，输出如下：


shared_var before decrement begins = 6841
Final value of shared_var = 7453
bash-5.0$ make; ./t
make: Nothing to be done for 'all'.
shared_var before decrement begins = 4525
Final value of shared_var = -118859
bash-5.0$ make; ./t
make: Nothing to be done for 'all'.
shared_var before decrement begins = 5058
Final value of shared_var = -52682
bash-5.0$ make; ./t
make: Nothing to be done for 'all'.
shared_var before decrement begins = 4938
Final value of shared_var = -101202
bash-5.0$ make; ./t
make: Nothing to be done for 'all'.
shared_var before decrement begins = 0
Final value of shared_var = 0

可发现最终结果不为零，这与我们的常识相违背。

加入条件变量。
bash-5.0$ make; ./t
...

...
Increment: shared_var = 1
Decrement: shared_var = 0
Increment: shared_var = 1
Decrement: shared_var = 0
Increment: shared_var = 1
Decrement: shared_var = 0
Increment: shared_var = 1
Decrement: shared_var = 0
Increment: shared_var = 1
Decrement: shared_var = 0
Increment: shared_var = 1
Decrement: shared_var = 0
Final value of shared_var = 0


条件变量 pthread_cond_t 允许线程在特定条件未满足时进入等待状态，而不是忙等。

### thread calling system and exec

bash-5.0$ make; ./t
make: Nothing to be done for 'all'.
Thread calling exec
call Program PID: 14799, TID: 14799
bash-5.0$ make; ./t
make: Nothing to be done for 'all'.
Thread calling system
Thread calling exec
call Program PID: 14813, TID: 14813
call Program PID: 14816, TID: 14816

有时线程decrement先调用了exec 程序直接不执行了，有时候后调用则能执行全部任务。  


bash-5.0$ make; ./t
gcc -o t t.c -lpthread
main   itself PID: 15750, TID: 15750
thread itself PID: 15750, TID: 15752
decrement calling system
thread itself PID: 15750, TID: 15751
increment calling system
call Program PID: 15753, TID: 15753
call Program PID: 15754, TID: 15754
decrement calling exec
call Program PID: 15750, TID: 15750

且发现线程pid <= tid

### spinlock
bash-5.0$ make; ./spinlock
gcc -o spinlock spinlock.c -lpthread
shared_value = 0
shared_value = 10000
bash-5.0$ 